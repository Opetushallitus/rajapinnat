<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" 
       xmlns:jaxws="http://cxf.apache.org/jaxws"
       xmlns:jaxrs="http://cxf.apache.org/jaxrs"
       xmlns:camel="http://camel.apache.org/schema/spring"
       xmlns:task="http://www.springframework.org/schema/task"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:http-conf="http://cxf.apache.org/transports/http/configuration"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd 
        http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd 
        http://cxf.apache.org/core http://cxf.apache.org/schemas/core.xsd
        http://cxf.apache.org/jaxrs http://cxf.apache.org/schemas/jaxrs.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd 
        http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
        http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd
        http://cxf.apache.org/transports/http/configuration
        http://cxf.apache.org/schemas/configuration/http-conf.xsd">
    <context:annotation-config/>

    <context:property-placeholder
            location="classpath:vtj-service.properties, file:///${user.home:''}/oph-configuration/common.properties, file:///${user.home:''}/oph-configuration/kela-opti.properties, file:///${user.home:''}/oph-configuration/override.properties"
            ignore-resource-not-found="true" properties-ref="defaultProps" />
    
    <bean id="defaultProps" class="org.springframework.beans.factory.config.PropertiesFactoryBean">        
    	<property name="properties">
            <util:properties local-override="true">
                <prop key="cas_key">kela-service</prop>
                <prop key="cas_service">${cas.service.kela-service}</prop>
                <prop key="spring_security_default_access">permitAll</prop>
            </util:properties>
        </property>
    </bean>

    <bean id="kelaTask" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
  		<property name="corePoolSize" value="1" />
  		<property name="maxPoolSize" value="1" />
  		<property name="queueCapacity" value="0" />
  		
	</bean>

    <context:component-scan base-package="fi.vm.sade.rajapinnat.kela" />
    
    <bean id="kelaDAO" class="fi.vm.sade.rajapinnat.kela.dao.impl.KelaDAOImpl"/>

    <bean scope="singleton" class="fi.vm.sade.organisaatio.service.search.OrganisaatioSearchService"/>
    <bean scope="singleton" class="fi.vm.sade.organisaatio.service.search.SolrServerFactory"/>
    
    <bean scope="singleton" class="fi.vm.sade.tarjonta.service.search.HakukohdeSearchService"/>
    <bean scope="singleton" class="fi.vm.sade.tarjonta.service.search.SolrServerFactory"/>

    <jaxws:client id="koodiPublicService"
                serviceClass="fi.vm.sade.koodisto.service.KoodiService"
                address="${koodi.public.webservice.url.backend:http://NO_KOODI_WEBSERVICE_URL_CONFIGURED}"/>

    <jaxws:client id="koodistoPublicService"
                  serviceClass="fi.vm.sade.koodisto.service.KoodistoService"
                  address="${koodisto.public.webservice.url.backend:http://NO_KOODISTO_WEBSERVICE_URL_CONFIGURED}"/>

    <!-- Scheduling -->
    <task:annotation-driven executor="kelaExecutor" scheduler="kelaScheduler"/>
    <task:executor id="kelaExecutor" pool-size="5"/>
    <task:scheduler id="kelaScheduler" pool-size="10"/>
    
    <!-- Let Spring create the Camel context and the Camel template, including lifecycle management such as starting and stopping them -->
    <camel:camelContext id="kelaCamelContext">
        <camel:template id="kelaCamelTemplate" />
    </camel:camelContext>
	
    <import resource="file:///${user.home:''}/oph-configuration/security-context-backend.xml"/>
    <import resource="dao-context.xml" />
   
</beans>