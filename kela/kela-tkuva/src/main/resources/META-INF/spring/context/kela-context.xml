<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ctx="http://www.springframework.org/schema/context"
	xmlns:beans="http://www.springframework.org/schema/beans" xmlns:util="http://www.springframework.org/schema/util"
	xmlns:jaxws="http://cxf.apache.org/jaxws"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:camel="http://camel.apache.org/schema/spring"
	xsi:schemaLocation="
       http://camel.apache.org/schema/spring 
       http://camel.apache.org/schema/spring/camel-spring.xsd
       http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd">

	<ctx:annotation-config />
	<!--
	Laita tama parent kontekstiin, eli kontekstiin jossa importtaat taman kontekstin (katso esim kela-integraatio-testi-context.xml).
	Property-placeholderin kaytto on pakollista koska ilman sita SPEL(spring expression language) ei toimi. Sita ei saa kuitenkaan
	maaritella tanne koska silloin sen ylikirjoittaminen yksikkotesteissa (tai muuallakaan) ei onnistu. 
	
	<ctx:property-placeholder
        location="classpath:kela-tkuva.properties, file:///${user.home:''}/oph-configuration/common.properties, file:///${user.home:''}/oph-configuration/kela-tkuva.properties"
        ignore-resource-not-found="true" />
	-->
        
	<jaxws:client id="tulosPublicService"
	                serviceClass="fi.vm.sade.tulos.service.TulosService"
	                address="${valintalaskentakoostepalvelu.sijoitteluService.url:http://NO_TULOS_WEBSERVICE_URL_CONFIGURED}"/>
	                
	<!--
		Camel-reitin konfiguraatio. Tarkoitus on siis ylikirjoittaa arvot propertyplaceholderin konfiguraatioilla! 
	 -->
	<util:properties id="kelaProperties">
		<beans:prop key="username">${kela.ftp.username}</beans:prop>
		<beans:prop key="password">${kela.ftp.password}</beans:prop>
		<beans:prop key="host">${kela.ftp.host}</beans:prop>
		<beans:prop key="port">${kela.ftp.port}</beans:prop>
		<beans:prop key="protocol">${kela.ftp.protocol}</beans:prop>
		<beans:prop key="path">${kela.ftp.path}</beans:prop>
	</util:properties>

	<routeContext id="kelaRoutes" xmlns="http://camel.apache.org/schema/spring">
		<route>
			<from uri="direct:kelaTiedostopalvelin" />
			<setHeader headerName="CamelFileName"><simple>${body.args[0]}</simple></setHeader>
			<setBody><simple>${body.args[1]}</simple></setBody>
			<to
				uri="{{protocol}}://{{username}}@{{host}}:{{port}}{{path}}?password={{password}}&amp;ftpClient.dataTimeout=30000&amp;passiveMode=true" />
		</route>
	</routeContext>

	<camelContext xmlns="http://camel.apache.org/schema/spring">
		<propertyPlaceholder id="kelaCamelProperties"
			location="ref:kelaProperties" />
		<proxy id="kelaFtpProxy"
			serviceInterface="fi.vm.sade.rajapinnat.kela.tkuva.service.KelaFtpService"
			serviceUrl="direct:kelaTiedostopalvelin" />
		<routeContextRef ref="kelaRoutes" />
	</camelContext>
	
	
</beans>
